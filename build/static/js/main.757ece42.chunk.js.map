{"version":3,"sources":["Generate.js","App.js","serviceWorker.js","index.js"],"names":["converter","showdown","Converter","Generate","React","useState","row","setRow","col","setCol","fileds","setFileds","handleSetFileds","r","c","_fileds","i","Array","handleFiledChange","event","length","target","value","concat","useEffect","className","onChange","Number","type","defaultValue","min","_","range","map","key","ii","bind","component","prettier","format","filed","f","tag","makeHtml","join","parser","plugins","parserHtml","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAOMA,EAAY,IAAIC,IAASC,UAEhB,SAASC,IAAY,IAAD,EACXC,IAAMC,SAAS,GADJ,mBAC1BC,EAD0B,KACrBC,EADqB,OAEXH,IAAMC,SAAS,GAFJ,mBAE1BG,EAF0B,KAErBC,EAFqB,OAGLL,IAAMC,SAAS,IAHV,mBAG1BK,EAH0B,KAGlBC,EAHkB,KAKjC,SAASC,EAAgBC,EAAGC,GAE1B,IADA,IAAIC,EAAU,GACNC,EAAI,EAAGA,EAAIH,EAAGG,IACpBD,EAAQC,GAAK,IAAIC,MAAMH,GAEzBH,EAAUI,GAYZ,SAASG,EAAkBL,EAAGC,EAAGK,GAC/B,IAAMJ,EAAUL,EACbK,EAAQF,IAAME,EAAQF,GAAGO,QAAUZ,EACpCO,EAAQF,GAAGC,GAAKK,EAAME,OAAOC,MAE7BP,EAAQF,GAAK,IAAII,MAAMT,GAEzBG,EAAU,GAAGY,OAAOR,IAKtB,OAHAS,qBAAU,WACRZ,EAAgBN,EAAM,EAAGE,KACzB,IAEA,yBAAKiB,UAAU,WACb,yBAAKA,UAAU,WACb,yKACA,2BAAOC,SA1Bb,SAAyBP,GACvB,IAAMG,EAAQK,OAAOR,EAAME,OAAOC,OAClCf,EAAOe,GACPV,EAAgBU,EAAQ,EAAGd,IAuBWiB,UAAU,MAAMG,KAAK,SAASC,aAAc,EAAGC,IAAK,IACtF,2BAAOJ,SAtBb,SAAyBP,GACvB,IAAMG,EAAQK,OAAOR,EAAME,OAAOC,OAClCb,EAAOa,GACPV,EAAgBN,EAAM,EAAGgB,IAmBaG,UAAU,MAAMG,KAAK,SAASC,aAAc,EAAGC,IAAK,KAExF,oCACA,qOACA,wBAAIL,UAAU,SACbM,IAAEC,MAAML,OAAOrB,GAAO,GAAG2B,KAAI,SAACjB,GAAD,OAC5B,wBAAIkB,IAAKlB,EAAI,KACXe,IAAEC,MAAMxB,GAAKyB,KAAI,SAACE,GAAD,OACb,8BAAUV,UAAW,cAAqBT,EAAGkB,IAAKlB,EAAI,IAAMmB,EAAIP,KAAK,OAAOF,SAAUR,EAAkBkB,KAAK,KAAMpB,EAAGmB,aAK9H,yBAAKV,UAAU,UACb,kBAAC,IAAD,CAAWY,UAAU,MAAMZ,UAAU,iBAClCa,IAASC,OAAT,iCACK7B,EAAOuB,KAAI,SAACO,EAAOxB,GACnB,MAAM,2BAAN,OACIwB,EAAMP,KAAI,SAAAQ,GACV,IAAMC,EAAY,IAAN1B,EAAU,KAAO,KAC7B,MAAM,IAAN,OAAW0B,EAAX,YAAkB1C,EAAU2C,SAASF,GAArC,aAA4CC,EAA5C,QACCE,KAAK,IAJV,8BAOCA,KAAK,IATX,wBAWU,CAACC,OAAQ,OAAQC,QAAS,CAACC,U,MC9DjCC,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAACtB,EAAD,QCKc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.757ece42.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport showdown from 'showdown';\nimport prettier from \"prettier/standalone\";\nimport parserHtml from \"prettier/parser-html\";\nimport PrismCode from 'react-prism';\nimport _ from 'lodash';\n\nconst converter = new showdown.Converter()\n\nexport default function Generate() {\n  const [row, setRow] = React.useState(3);\n  const [col, setCol] = React.useState(3);\n  const [fileds, setFileds] = React.useState([]);\n\n  function handleSetFileds(r, c){\n    var _fileds = [];\n    for(let i = 0; i < r; i++){\n      _fileds[i] = new Array(c);\n    }\n    setFileds(_fileds);\n  }\n  function handleChangeRow(event){\n    const value = Number(event.target.value);\n    setRow(value);\n    handleSetFileds(value + 1, col);\n  }\n  function handleChangeCol(event){\n    const value = Number(event.target.value);\n    setCol(value);\n    handleSetFileds(row + 1, value);\n  }\n  function handleFiledChange(r, c, event){\n    const _fileds = fileds;\n    if(_fileds[r] && _fileds[r].length >= col){\n      _fileds[r][c] = event.target.value;\n    } else {\n      _fileds[r] = new Array(col);\n    }\n    setFileds([].concat(_fileds));\n  }\n  useEffect(() => {\n    handleSetFileds(row + 1, col);\n  },[])\n  return(\n    <div className=\"wrapper\">\n      <div className=\"selects\">\n        <p>选择行、列数，每次重选需要手动改变一下面输入框</p>\n        <input onChange={handleChangeRow} className=\"row\" type=\"number\" defaultValue={3} min={0} />\n        <input onChange={handleChangeCol} className=\"col\" type=\"number\" defaultValue={3} min={0} />\n      </div>\n      <p>v 1.0</p>\n      <p>超出可左右滑动，第一行为表头，在下面表格中可以填写markdown语法，类似`# header`</p>\n      <ul className=\"table\">\n      {_.range(Number(row) + 1).map((i) => \n        <li key={i + '0'}>{\n          _.range(col).map((ii) =>\n              <textarea className={'filed ' + 'filed' + i} key={i + '0' + ii} type=\"text\" onChange={handleFiledChange.bind(null, i, ii)} />\n          )}\n        </li>\n      )}\n      </ul>\n      <div className=\"result\">\n        <PrismCode component=\"pre\" className=\"language-html\">\n          {prettier.format(`<table>\n              ${fileds.map((filed, i) =>{\n                return `<tr>\n                  ${filed.map(f => {\n                    const tag = i === 0 ? 'th' : 'td';\n                    return `<${tag}>${converter.makeHtml(f)}</${tag}>`\n                  }).join('')\n                }\n                </tr>`\n              }).join('')\n            }\n          </table>`, {parser: \"html\", plugins: [parserHtml]})}\n        </PrismCode>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport Generate from './Generate';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Generate />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}